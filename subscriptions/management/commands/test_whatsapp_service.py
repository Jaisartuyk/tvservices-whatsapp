from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from subscriptions.services import WhatsAppService, NotificationService
import logging

logger = logging.getLogger('subscriptions.management')

class Command(BaseCommand):
    help = 'Prueba la configuraci√≥n del servicio de WhatsApp'

    def add_arguments(self, parser):
        parser.add_argument(
            '--phone',
            type=str,
            help='N√∫mero de tel√©fono para enviar mensaje de prueba (ej: 573001234567)'
        )
        parser.add_argument(
            '--message',
            type=str,
            default='üß™ Mensaje de prueba desde TV Services. ¬°El sistema de notificaciones funciona correctamente!',
            help='Mensaje personalizado para enviar'
        )

    def handle(self, *args, **options):
        self.stdout.write('üîß Probando configuraci√≥n del servicio de WhatsApp...\n')
        
        # Verificar configuraci√≥n
        self._check_configuration()
        
        # Probar servicio b√°sico
        self._test_whatsapp_service()
        
        # Si se proporciona un tel√©fono, enviar mensaje de prueba
        if options['phone']:
            self._send_test_message(options['phone'], options['message'])
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ Pruebas completadas. Revisa los logs para m√°s detalles.')
        )

    def _check_configuration(self):
        """Verifica la configuraci√≥n del sistema"""
        self.stdout.write('üìã Verificando configuraci√≥n...')
        
        # Verificar variables de entorno
        api_key = getattr(settings, 'WASENDER_API_KEY', '')
        instance_id = getattr(settings, 'WASENDER_INSTANCE_ID', '')
        api_url = getattr(settings, 'WASENDER_API_URL', '')
        
        if not api_key:
            self.stdout.write(
                self.style.ERROR('‚ùå WASENDER_API_KEY no est√° configurado')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ API Key configurado: {api_key[:10]}...')
            )
        
        if not instance_id:
            self.stdout.write(
                self.style.ERROR('‚ùå WASENDER_INSTANCE_ID no est√° configurado')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Instance ID configurado: {instance_id}')
            )
        
        self.stdout.write(f'üåê API URL: {api_url}')
        
        # Verificar configuraci√≥n de notificaciones
        notification_settings = getattr(settings, 'NOTIFICATION_SETTINGS', {})
        enabled = notification_settings.get('ENABLE_WHATSAPP_NOTIFICATIONS', False)
        
        if enabled:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Notificaciones de WhatsApp habilitadas')
            )
        else:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è Notificaciones de WhatsApp deshabilitadas')
            )
        
        days_notice = notification_settings.get('EXPIRATION_DAYS_NOTICE', [])
        self.stdout.write(f'üìÖ D√≠as de aviso configurados: {days_notice}')

    def _test_whatsapp_service(self):
        """Prueba la inicializaci√≥n del servicio"""
        self.stdout.write('\nüîå Probando servicio de WhatsApp...')
        
        try:
            whatsapp_service = WhatsAppService()
            self.stdout.write('‚úÖ Servicio de WhatsApp inicializado correctamente')
            
            # Probar limpieza de n√∫meros
            test_numbers = [
                '3001234567',      # N√∫mero colombiano sin c√≥digo
                '+573001234567',   # N√∫mero con c√≥digo internacional
                '57 300 123 4567', # N√∫mero con espacios
                '(300) 123-4567',  # N√∫mero con formato
                '1234567',         # N√∫mero fijo sin c√≥digo de √°rea
            ]
            
            self.stdout.write('\nüìû Probando limpieza de n√∫meros de tel√©fono:')
            for number in test_numbers:
                cleaned = whatsapp_service._clean_phone_number(number)
                status = '‚úÖ' if cleaned else '‚ùå'
                self.stdout.write(f'  {status} {number} ‚Üí {cleaned}')
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error inicializando servicio: {str(e)}')
            )

    def _send_test_message(self, phone_number, message):
        """Env√≠a un mensaje de prueba"""
        self.stdout.write(f'\nüì± Enviando mensaje de prueba a {phone_number}...')
        
        try:
            whatsapp_service = WhatsAppService()
            result = whatsapp_service.send_message(phone_number, message)
            
            if result['success']:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Mensaje enviado exitosamente!')
                )
                self.stdout.write(f'üìä Respuesta: {result.get("data", {})}')
            else:
                error = result.get('error', 'Error desconocido')
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Error enviando mensaje: {error}')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error inesperado: {str(e)}')
            )

    def _test_notification_service(self):
        """Prueba el servicio de notificaciones (sin env√≠o real)"""
        self.stdout.write('\nüîî Probando servicio de notificaciones...')
        
        try:
            notification_service = NotificationService()
            self.stdout.write('‚úÖ Servicio de notificaciones inicializado correctamente')
            
            # Aqu√≠ podr√≠as agregar m√°s pruebas espec√≠ficas del servicio de notificaciones
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error inicializando servicio de notificaciones: {str(e)}')
            )
